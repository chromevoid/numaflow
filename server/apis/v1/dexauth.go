package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"net/http/httputil"
	"net/url"
	"time"

	"github.com/coreos/go-oidc/v3/oidc"
	"github.com/gin-gonic/gin"
	"golang.org/x/oauth2"
)

// DexPOC is a struct that holds details for dex handlers
type DexPOC struct {
	clientID     string
	clientSecret string
	redirectURI  string

	verifier *oidc.IDTokenVerifier
	provider *oidc.Provider

	// Does the provider use "offline_access" scope to request a refresh token
	// or does it use "access_type=offline" (e.g. Google)?
	offlineAsScope bool

	client *http.Client

	idToken      string // idToken is the jwt token generated by OIDC provider
	refreshToken string // refreshToken is the refresh token generated by the OIDC provider
	stateNonce   string // stateNonce is the nonce variable
}

func (d *DexPOC) oauth2Config(scopes []string) *oauth2.Config {
	return &oauth2.Config{
		ClientID:     d.clientID,
		ClientSecret: d.clientSecret,
		Endpoint:     d.provider.Endpoint(),
		Scopes:       scopes,
		RedirectURL:  d.redirectURI,
	}
}

func NewDexPOC(ctx context.Context) *DexPOC {
	clientID := "example-app"
	// TODO: TLS
	// issuerURL := "https://numaflow-dex-server:5556/dex"
	// issuerURL := "https://numaflow-server:8443/dex"
	issuerURL := "http://numaflow-dex-server:5556/dex"
	provider, err := oidc.NewProvider(ctx, issuerURL)
	if err != nil {
		log.Fatalf("failed to query provider %q: %v", issuerURL, err)
	}
	verifier := provider.Verifier(&oidc.Config{ClientID: clientID})

	return &DexPOC{
		clientID:       clientID,
		clientSecret:   "ZXhhbXBsZS1hcHAtc2VjcmV0",
		redirectURI:    "https://numaflow-server:8443/api/v1/callback",
		verifier:       verifier,
		provider:       provider,
		offlineAsScope: true,
		client:         http.DefaultClient,
		idToken:        "",
		refreshToken:   "",
		stateNonce:     "",
	}
}

func (d *DexPOC) handleLogin(c *gin.Context) {
	var scopes []string
	authCodeURL := ""
	scopes = append(scopes, "openid", "profile", "email", "groups")
	// stateNonce is an OAuth2 state nonce
	d.stateNonce = generateRandomNumber(10)
	if d.offlineAsScope {
		scopes = append(scopes, "offline_access")
		authCodeURL = d.oauth2Config(scopes).AuthCodeURL(d.stateNonce)
	} else {
		authCodeURL = d.oauth2Config(scopes).AuthCodeURL(d.stateNonce, oauth2.AccessTypeOffline)
	}
	fmt.Println(authCodeURL)
	c.Redirect(http.StatusSeeOther, authCodeURL)
}

func (d *DexPOC) handleCallback(c *gin.Context) {
	fmt.Println("dex callback")
	var (
		w     = c.Writer
		r     = c.Request
		err   error
		token *oauth2.Token
	)

	ctx := oidc.ClientContext(r.Context(), d.client)
	oauth2Config := d.oauth2Config(nil)
	switch r.Method {
	case http.MethodGet:
		// Authorization redirect callback from OAuth2 auth flow.
		if errMsg := r.FormValue("error"); errMsg != "" {
			http.Error(w, errMsg+": "+r.FormValue("error_description"), http.StatusBadRequest)
			return
		}
		code := r.FormValue("code")
		if code == "" {
			http.Error(w, fmt.Sprintf("no code in request: %q", r.Form), http.StatusBadRequest)
			return
		}
		if state := r.FormValue("state"); state != d.stateNonce {
			http.Error(w, fmt.Sprintf("expected state %q got %q", d.stateNonce, state), http.StatusBadRequest)
			return
		}
		token, err = oauth2Config.Exchange(ctx, code)
	case http.MethodPost:
		// Form request from frontend to refresh d token.
		refresh := r.FormValue("refresh_token")
		if refresh == "" {
			http.Error(w, fmt.Sprintf("no refresh_token in request: %q", r.Form), http.StatusBadRequest)
			return
		}
		t := &oauth2.Token{
			RefreshToken: refresh,
			Expiry:       time.Now().Add(-time.Hour),
		}
		token, err = oauth2Config.TokenSource(ctx, t).Token()
	default:
		http.Error(w, fmt.Sprintf("method not implemented: %s", r.Method), http.StatusBadRequest)
		return
	}

	if err != nil {
		http.Error(w, fmt.Sprintf("failed to get token: %v", err), http.StatusInternalServerError)
		return
	}

	rawIDToken, ok := token.Extra("id_token").(string)
	if !ok {
		http.Error(w, "no id_token in token response", http.StatusInternalServerError)
		return
	}

	idToken, err := d.verifier.Verify(r.Context(), rawIDToken)
	if err != nil {
		http.Error(w, fmt.Sprintf("failed to verify ID token: %v", err), http.StatusInternalServerError)
		return
	}

	accessToken, ok := token.Extra("access_token").(string)
	if !ok {
		http.Error(w, "no access_token in token response", http.StatusInternalServerError)
		return
	}

	var claims json.RawMessage
	if err := idToken.Claims(&claims); err != nil {
		http.Error(w, fmt.Sprintf("error decoding ID token claims: %v", err), http.StatusInternalServerError)
		return
	}
	fmt.Println(claims)

	buff := new(bytes.Buffer)
	if err := json.Indent(buff, []byte(claims), "", "  "); err != nil {
		http.Error(w, fmt.Sprintf("error indenting ID token claims: %v", err), http.StatusInternalServerError)
		return
	}

	d.idToken = rawIDToken
	fmt.Println("rawIDToken accessToken", rawIDToken, accessToken)
	d.refreshToken, _ = token.Extra("refresh_token").(string)
	c.Redirect(http.StatusFound, "/")
	// rawIDToken, accessToken, d.stateNonce
	// c.SetCookie("user-identity-token", token, 3600, "/", "", true, true)
}

// generateRandomNumber is for generating state nonce. This piece of code was obtained without much change from the argo-cd repository.
// from a given charset generates a cryptographically-secure pseudo-random string of a given length.
func generateRandomNumber(n int) string {
	charset := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	src := rand.NewSource(time.Now().UnixNano())
	letterIdxBits := 6                    // 6 bits to represent a letter index
	letterIdxMask := 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
	letterIdxMax := 63 / letterIdxBits    // # of letter indices fitting in 63 bits
	b := make([]byte, n)
	// A src.Int63() generates 63 random bits, enough for letterIdxMax characters!
	for i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = src.Int63(), letterIdxMax
		}
		if idx := int(cache) & letterIdxMask; idx < len(charset) {
			b[i] = charset[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}
	return string(b)
}

func DexReverseProxy(c *gin.Context) {
	var target = "http://numaflow-dex-server:5556"
	proxyUrl, _ := url.Parse(target)

	c.Request.URL.Path = c.Param("name")

	proxy := httputil.NewSingleHostReverseProxy(proxyUrl)

	proxy.ServeHTTP(c.Writer, c.Request)
}
